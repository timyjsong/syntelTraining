package rms.dao;

import org.springframework.jdbc.core.JdbcTemplate;

import rms.model.BookingModel;
import rms.model.BookingRangeModel;
import rms.model.VisitorsModel;
import rms.mapper.BookingMapper;
import rms.mapper.BookingRangeMapper;
import rms.mapper.ResourceMapper;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.time.*;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class BookingDAO {
    private JdbcTemplate temp;
    
    public BookingDAO(){
        temp = Connection.getConnection();
    }
    
    // Return the next available ID for insert
    public int getNextAvailableKey() {
    	Integer keyInc = (Integer)temp.queryForObject("select MAX(bookingId) from Booking",Integer.class);
    	if(keyInc == null) 
    		return 1;
    	else
    		return keyInc+1;
    }
    
    // Return BookingModel with specified bookingID
    public BookingModel getBooking(int bId) {
    	return (BookingModel)temp.queryForObject("Select * from Booking where bookingId = ?", new BookingMapper(), bId);
    }
    
    // Inserts specified Booking into Booking table
    public int insertBooking(BookingModel book) {
    	return temp.update("insert into Booking values(?,?,?,?,?,?,1)",
    			new BookingDAO().getNextAvailableKey(), book.getLocResID(), book.getUserID(), book.getStartTime(), book.getEndTime(), book.getDescription());
    }
	
    // Updates isActive column entry to 0 to the specified Booking from Booking table
    public int deleteBooking(BookingModel book) {
    	return temp.update("update Booking set isActive = 0 where bookingId = ?", book.getID());
    }
		
    // Updates specified Booking from Booking table
    public int updateBooking(BookingModel book) {
    	return temp.update("update Booking set locResId = ?, userId = ?, startTime = ?, "
    			+ "endTime = ?, description = ? where bookingId = ?",
    			book.getLocResID(), book.getUserID(), book.getStartTime(), 
    			book.getEndTime(), book.getDescription(), book.getID());
    }
    
    public List<BookingRangeModel> getBookingRange(int locResId, String sTime, String eTime) {
    	return temp.query("select startTime, endTime from booking where "
    			+ "((startTime between ? and ?) or (endTime between ? and ?)) "
    			+ "and locResId = ?",new BookingRangeMapper(), sTime, eTime, sTime, eTime, locResId);
    }
    
    public List<BookingRangeModel> getBookingRange(int locId, int resId, String sTime, String eTime) {
    	return temp.query("select startTime, endTime from booking where "
    			+ "((startTime between ? and ?) or (endTime between ? and ?)) "
    			+ "and locResId = ?",new BookingRangeMapper(), sTime, eTime, sTime, eTime, locResId);
    }
    
    // Returns a list of BookingModels from Booking table
    public List<BookingModel> getAllBookings() {
    	return temp.query("select * from Booking", new BookingMapper());
    }
    
    public List<BookingModel> getBookingsForCurrentDate() {
    	return temp.query("select * from Booking where (sysdate between startTime and endTime) or (sysdate < startTime)", new BookingMapper());
    }
    
    // Given date range, return list of bookings overlapping with that range
    public List<BookingModel> getBookingsWithDateRange(String sTime, String eTime) {
    	return temp.query("select * from Booking where (startTime between ? and ?) or (endTime between ? and ?)",
    			new BookingMapper(), sTime, eTime, sTime, eTime);
    }
    
    public List<ChartData> getNumberBookingPerDay()
    {
        List<ChartData> data = new ArrayList<>();
        List<Map<String, Object>> rows = temp.queryForList("SELECT Trunc(starttime) as dt,COUNT(*) as cnt FROM BOOKING GROUP BY STARTTIME");
        for (Map row: rows) {
            ChartData temp = new ChartData();
            temp.setNumDays(((BigDecimal)row.get("cnt")).intValue());
            temp.setDateTime(((Timestamp)row.get("dt")).toLocalDateTime().toLocalDate().toString());
            data.add(temp);
        }
        return data;
    }
    
    public static void main (String args[]) {
    	
    	System.out.println("START");
    	List<BookingRangeModel> list = new BookingDAO().getBookingRange(52,"06-JUL-18 05.39.30.000000000 AM", 
    			"17-SEP-18 03.48.25.000000000 AM");

    	//List<BookingModel> list = new BookingDAO().getBookingsForCurrentDate();
    	for(BookingRangeModel b : list) {
    		System.out.println(b.toString());
    	}
    }
    
}
