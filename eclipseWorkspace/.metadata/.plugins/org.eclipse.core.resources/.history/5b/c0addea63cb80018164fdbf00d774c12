package rms.dao;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.jdbc.core.JdbcTemplate;

import rms.mapper.ResourceFeatureMapper;
import rms.model.ResourceFeatureModel;

import java.sql.ResultSet;
import java.util.List;

public class ResourceFeatureDAO {
    private JdbcTemplate temp;
    
    public ResourceFeatureDAO(){
        temp = Connection.getConnection();
    }
    
    // Return ResourceFeatureModel with specified ResourceFeatureID
    public ResourceFeatureModel getResourceFeature(int rfId) {
    	return (ResourceFeatureModel)temp.queryForObject("Select * from ResourceFeature where resFeaId = ?", new ResourceFeatureMapper(), rfId);
    }
    
    // Return the next available ID for insert
    public int getNextAvailableKey() {
    	int key = (int)temp.queryForObject("select MAX(resFeaId) from ResourceFeature",Integer.class);
    	return key+1;
    }
    
    // Inserts specified ResourceFeature into ResourceFeature table
    public int insertResourceFeature(ResourceFeatureModel rf) {
    	return temp.update("insert into ResourceFeature values(?,?,?,?,?,1)",
    			new ResourceFeatureDAO().getNextAvailableKey(), rf.getFeaId(), rf.getLocResId(), rf.getQuantity(), rf.getDescription());
    }
    
    public int insertResourceFeatureWith(int feaId, int resId, int quantity, String description) {
    	int locResId = (int)temp.queryForObject("select locResId from LocationResource where resId = ?", Integer.class, resId);
    	return temp.update("insert into ResourceFeature values(?,?,?,?,?,1)",
    			new ResourceFeatureDAO().getNextAvailableKey(), feaId, locResId, quantity, description);
    }
    
    // Updates isActive column entry to 0 to the specified ResourceFeature from ResourceFeature table
    public int deleteResourceFeature(ResourceFeatureModel rf) {
    	return temp.update("update ResourceFeature set isActive = 0 where resFeaId = ?", rf.getResFeaId());
    }
	
    // Updates specified ResourceFeature from ResourceFeature table
    public int updateResourceFeature(ResourceFeatureModel rf) {
    	return temp.update("update ResourceFeature set feaId = ?, locResId = ?, quantity = ?, description = ? where resFeaId = ?",
    			rf.getFeaId(), rf.getLocResId(), rf.getQuantity(), rf.getDescription(), rf.getResFeaId());
    }
    
    // Given featureID and resourceID, return ResourceFeatureModel
    public List<ResourceFeatureModel> getResourceFeatureWithFeaId(int feaId, int resId) {
    	return temp.query("select rf.resFeaId, rf.feaId, rf.locResId, rf.quantity, rf.description, rf.isActive "
    			+ "from ResourceFeature rf join LocationResource lr on rf.locResId = lr.locResId "
    			+ "where rf.feaId = ? and lr.resId = ?",new ResourceFeatureMapper(), feaId, resId);
    }

    // Returns a list of ResourceFeatureModel from ResourceFeature table
    public List<ResourceFeatureModel> getAllResourceFeatures() {
    	return temp.query("select * from ResourceFeature", new ResourceFeatureMapper());
    }
    
    /*
    public static void main (String args[]) {
    	new ResourceFeatureDAO().insertResourceFeatureWith(3, 10,14,"IDK");
    	
    	List<ResourceFeatureModel> list = new ResourceFeatureDAO().getAllResourceFeatures();
    	for(ResourceFeatureModel rf : list) {

    	System.out.println(rf.toString());

    	}
    }
    */
	
}
