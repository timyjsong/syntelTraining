package rms.dao;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.jdbc.core.JdbcTemplate;

import rms.mapper.LocationResourceMapper;
import rms.model.LocationResourceModel;

import java.util.List;

public class LocationResourceDAO {
    private JdbcTemplate temp;

    public LocationResourceDAO(){
        temp = Connection.getConnection();
    }
    
    // Return the next available ID for insert
    public int getNextAvailableKey() {
    	Integer keyInc = (Integer)temp.queryForObject("select MAX(locResId) from LocationResource",Integer.class);
    	if(keyInc == null) 
    		return 1;
    	else
    		return keyInc+1;
    }
    
    // Return LocationModel with specified locationID
    public LocationResourceModel getLocation(int locId) {
    	return (LocationResourceModel)temp.queryForObject("Select * from Location where locId = ?", new LocationResourceMapper(), locId);
    }
    
    // Inserts specified location into Location table
    public int insertLocation(LocationResourceModel loc) {
    	return temp.update("insert into Location values(?,?,?,?,?,?,1)",
    			new LocationDAO().getNextAvailableKey(), loc.getLocName(), loc.getLocCity(), loc.getLocState(), loc.getLocAddress(), loc.getDescription());
    }
	
    // Updates isActive column entry to 0 to the specified location from Location table
    public int deleteLocation(LocationResourceModel loc) {
    	return temp.update("update Location set isActive = 0 where locId = ?", loc.getLocId());
    }
	
    // Updates specified location from Location table
    public int updateLocation(LocationResourceModel loc) {
    	return temp.update("update Location set locName = ?, locCity = ?, locState =?, locAddress = ?, description = ? where locId = ?)",
    			loc.getLocName(), loc.getLocCity(), loc.getLocState(), loc.getLocAddress(), loc.getDescription(), loc.getLocId());
    }
    
    // Returns a list of LocationModel from Location table
    public List<LocationResourceModel> getAllLocations() {
    	return temp.query("select * from Location", new LocationResourceMapper());
    }

}
